/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * Flyer Openapi
 * Flyer Openapi version
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type {
  CreateInvoice201,
  CreateInvoice500,
  CreateInvoiceBody,
  ListInvoices200,
  ListInvoices500,
  ListInvoicesParams,
  GetInvoice200,
  GetInvoice500,
  DeleteInvoice200,
  DeleteInvoice500,
  SendInvoice500,
  SendInvoiceBody,
  NextInvoiceNumber200,
  NextInvoiceNumber500,
  GetInvoicePreviewBody,
} from ".././interfaces";
import { customInstance } from "../../orvalInstance";
import type { ErrorType } from "../../orvalInstance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * create new invoice
 */
export const createInvoice = (
  createInvoiceBody: CreateInvoiceBody,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<CreateInvoice201>(
    {
      url: `/v1/invoices`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: createInvoiceBody,
    },
    options
  );
};

export const getCreateInvoiceMutationOptions = <
  TError = ErrorType<CreateInvoice500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createInvoice>>,
    TError,
    { data: CreateInvoiceBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createInvoice>>,
  TError,
  { data: CreateInvoiceBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createInvoice>>,
    { data: CreateInvoiceBody }
  > = (props) => {
    const { data } = props ?? {};

    return createInvoice(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateInvoiceMutationResult = NonNullable<
  Awaited<ReturnType<typeof createInvoice>>
>;
export type CreateInvoiceMutationBody = CreateInvoiceBody;
export type CreateInvoiceMutationError = ErrorType<CreateInvoice500>;

export const useCreateInvoice = <
  TError = ErrorType<CreateInvoice500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createInvoice>>,
    TError,
    { data: CreateInvoiceBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getCreateInvoiceMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * list all invoices
 */
export const listInvoices = (
  params?: ListInvoicesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<ListInvoices200>(
    { url: `/v1/invoices`, method: "get", params, signal },
    options
  );
};

export const getListInvoicesQueryKey = (params?: ListInvoicesParams) =>
  [`/v1/invoices`, ...(params ? [params] : [])] as const;

export const getListInvoicesQueryOptions = <
  TData = Awaited<ReturnType<typeof listInvoices>>,
  TError = ErrorType<ListInvoices500>
>(
  params?: ListInvoicesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listInvoices>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryOptions<Awaited<ReturnType<typeof listInvoices>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListInvoicesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listInvoices>>> = ({
    signal,
  }) => listInvoices(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type ListInvoicesQueryResult = NonNullable<
  Awaited<ReturnType<typeof listInvoices>>
>;
export type ListInvoicesQueryError = ErrorType<ListInvoices500>;

export const useListInvoices = <
  TData = Awaited<ReturnType<typeof listInvoices>>,
  TError = ErrorType<ListInvoices500>
>(
  params?: ListInvoicesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listInvoices>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getListInvoicesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * get invoice
 */
export const getInvoice = (
  invoiceId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<GetInvoice200>(
    { url: `/v1/invoices/${invoiceId}`, method: "get", signal },
    options
  );
};

export const getGetInvoiceQueryKey = (invoiceId: string) =>
  [`/v1/invoices/${invoiceId}`] as const;

export const getGetInvoiceQueryOptions = <
  TData = Awaited<ReturnType<typeof getInvoice>>,
  TError = ErrorType<GetInvoice500>
>(
  invoiceId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getInvoice>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryOptions<Awaited<ReturnType<typeof getInvoice>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetInvoiceQueryKey(invoiceId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getInvoice>>> = ({
    signal,
  }) => getInvoice(invoiceId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!invoiceId, ...queryOptions };
};

export type GetInvoiceQueryResult = NonNullable<
  Awaited<ReturnType<typeof getInvoice>>
>;
export type GetInvoiceQueryError = ErrorType<GetInvoice500>;

export const useGetInvoice = <
  TData = Awaited<ReturnType<typeof getInvoice>>,
  TError = ErrorType<GetInvoice500>
>(
  invoiceId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getInvoice>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetInvoiceQueryOptions(invoiceId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * delete invoice
 */
export const deleteInvoice = (
  invoiceId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<DeleteInvoice200>(
    { url: `/v1/invoices/${invoiceId}`, method: "delete" },
    options
  );
};

export const getDeleteInvoiceMutationOptions = <
  TError = ErrorType<DeleteInvoice500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteInvoice>>,
    TError,
    { invoiceId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteInvoice>>,
  TError,
  { invoiceId: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteInvoice>>,
    { invoiceId: string }
  > = (props) => {
    const { invoiceId } = props ?? {};

    return deleteInvoice(invoiceId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteInvoiceMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteInvoice>>
>;

export type DeleteInvoiceMutationError = ErrorType<DeleteInvoice500>;

export const useDeleteInvoice = <
  TError = ErrorType<DeleteInvoice500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteInvoice>>,
    TError,
    { invoiceId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getDeleteInvoiceMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * send invoice
 */
export const sendInvoice = (
  invoiceId: string,
  sendInvoiceBody: SendInvoiceBody,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<unknown>(
    {
      url: `/v1/invoices/${invoiceId}/send`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: sendInvoiceBody,
    },
    options
  );
};

export const getSendInvoiceMutationOptions = <
  TError = ErrorType<SendInvoice500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendInvoice>>,
    TError,
    { invoiceId: string; data: SendInvoiceBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof sendInvoice>>,
  TError,
  { invoiceId: string; data: SendInvoiceBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sendInvoice>>,
    { invoiceId: string; data: SendInvoiceBody }
  > = (props) => {
    const { invoiceId, data } = props ?? {};

    return sendInvoice(invoiceId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SendInvoiceMutationResult = NonNullable<
  Awaited<ReturnType<typeof sendInvoice>>
>;
export type SendInvoiceMutationBody = SendInvoiceBody;
export type SendInvoiceMutationError = ErrorType<SendInvoice500>;

export const useSendInvoice = <
  TError = ErrorType<SendInvoice500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendInvoice>>,
    TError,
    { invoiceId: string; data: SendInvoiceBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getSendInvoiceMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * get next invoice number
 */
export const nextInvoiceNumber = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<NextInvoiceNumber200>(
    { url: `/v1/invoices/number`, method: "get", signal },
    options
  );
};

export const getNextInvoiceNumberQueryKey = () =>
  [`/v1/invoices/number`] as const;

export const getNextInvoiceNumberQueryOptions = <
  TData = Awaited<ReturnType<typeof nextInvoiceNumber>>,
  TError = ErrorType<NextInvoiceNumber500>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof nextInvoiceNumber>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryOptions<
  Awaited<ReturnType<typeof nextInvoiceNumber>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getNextInvoiceNumberQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof nextInvoiceNumber>>
  > = ({ signal }) => nextInvoiceNumber(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type NextInvoiceNumberQueryResult = NonNullable<
  Awaited<ReturnType<typeof nextInvoiceNumber>>
>;
export type NextInvoiceNumberQueryError = ErrorType<NextInvoiceNumber500>;

export const useNextInvoiceNumber = <
  TData = Awaited<ReturnType<typeof nextInvoiceNumber>>,
  TError = ErrorType<NextInvoiceNumber500>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof nextInvoiceNumber>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getNextInvoiceNumberQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * get invoice preview
 */
export const getInvoicePreview = (
  getInvoicePreviewBody: GetInvoicePreviewBody,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/v1/invoices/preview`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: getInvoicePreviewBody,
    },
    options
  );
};

export const getGetInvoicePreviewMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getInvoicePreview>>,
    TError,
    { data: GetInvoicePreviewBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof getInvoicePreview>>,
  TError,
  { data: GetInvoicePreviewBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getInvoicePreview>>,
    { data: GetInvoicePreviewBody }
  > = (props) => {
    const { data } = props ?? {};

    return getInvoicePreview(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type GetInvoicePreviewMutationResult = NonNullable<
  Awaited<ReturnType<typeof getInvoicePreview>>
>;
export type GetInvoicePreviewMutationBody = GetInvoicePreviewBody;
export type GetInvoicePreviewMutationError = ErrorType<unknown>;

export const useGetInvoicePreview = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getInvoicePreview>>,
    TError,
    { data: GetInvoicePreviewBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getGetInvoicePreviewMutationOptions(options);

  return useMutation(mutationOptions);
};
