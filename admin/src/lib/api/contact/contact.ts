/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * Flyer Openapi
 * Flyer Openapi version
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type {
  CreateContact201,
  CreateContact500,
  CreateContactBody,
  ListContacts200,
  ListContacts500,
  ListContactsParams,
  GetContact200,
  GetContact500,
  UpdateContact200,
  UpdateContact500,
  UpdateContactBody,
  DeleteContact200,
  DeleteContact500,
} from ".././interfaces";
import { customInstance } from "../../orvalInstance";
import type { ErrorType } from "../../orvalInstance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * create new contact
 */
export const createContact = (
  createContactBody: CreateContactBody,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<CreateContact201>(
    {
      url: `/v1/contacts`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: createContactBody,
    },
    options
  );
};

export const getCreateContactMutationOptions = <
  TError = ErrorType<CreateContact500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createContact>>,
    TError,
    { data: CreateContactBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createContact>>,
  TError,
  { data: CreateContactBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createContact>>,
    { data: CreateContactBody }
  > = (props) => {
    const { data } = props ?? {};

    return createContact(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateContactMutationResult = NonNullable<
  Awaited<ReturnType<typeof createContact>>
>;
export type CreateContactMutationBody = CreateContactBody;
export type CreateContactMutationError = ErrorType<CreateContact500>;

export const useCreateContact = <
  TError = ErrorType<CreateContact500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createContact>>,
    TError,
    { data: CreateContactBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getCreateContactMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * list all contacts
 */
export const listContacts = (
  params?: ListContactsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<ListContacts200>(
    { url: `/v1/contacts`, method: "get", params, signal },
    options
  );
};

export const getListContactsQueryKey = (params?: ListContactsParams) =>
  [`/v1/contacts`, ...(params ? [params] : [])] as const;

export const getListContactsQueryOptions = <
  TData = Awaited<ReturnType<typeof listContacts>>,
  TError = ErrorType<ListContacts500>
>(
  params?: ListContactsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listContacts>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryOptions<Awaited<ReturnType<typeof listContacts>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListContactsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listContacts>>> = ({
    signal,
  }) => listContacts(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type ListContactsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listContacts>>
>;
export type ListContactsQueryError = ErrorType<ListContacts500>;

export const useListContacts = <
  TData = Awaited<ReturnType<typeof listContacts>>,
  TError = ErrorType<ListContacts500>
>(
  params?: ListContactsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listContacts>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getListContactsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * get contact
 */
export const getContact = (
  contactId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<GetContact200>(
    { url: `/v1/contacts/${contactId}`, method: "get", signal },
    options
  );
};

export const getGetContactQueryKey = (contactId: string) =>
  [`/v1/contacts/${contactId}`] as const;

export const getGetContactQueryOptions = <
  TData = Awaited<ReturnType<typeof getContact>>,
  TError = ErrorType<GetContact500>
>(
  contactId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getContact>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryOptions<Awaited<ReturnType<typeof getContact>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetContactQueryKey(contactId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getContact>>> = ({
    signal,
  }) => getContact(contactId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!contactId, ...queryOptions };
};

export type GetContactQueryResult = NonNullable<
  Awaited<ReturnType<typeof getContact>>
>;
export type GetContactQueryError = ErrorType<GetContact500>;

export const useGetContact = <
  TData = Awaited<ReturnType<typeof getContact>>,
  TError = ErrorType<GetContact500>
>(
  contactId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getContact>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetContactQueryOptions(contactId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * update contact
 */
export const updateContact = (
  contactId: string,
  updateContactBody: UpdateContactBody,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<UpdateContact200>(
    {
      url: `/v1/contacts/${contactId}`,
      method: "put",
      headers: { "Content-Type": "application/json" },
      data: updateContactBody,
    },
    options
  );
};

export const getUpdateContactMutationOptions = <
  TError = ErrorType<UpdateContact500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateContact>>,
    TError,
    { contactId: string; data: UpdateContactBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateContact>>,
  TError,
  { contactId: string; data: UpdateContactBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateContact>>,
    { contactId: string; data: UpdateContactBody }
  > = (props) => {
    const { contactId, data } = props ?? {};

    return updateContact(contactId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateContactMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateContact>>
>;
export type UpdateContactMutationBody = UpdateContactBody;
export type UpdateContactMutationError = ErrorType<UpdateContact500>;

export const useUpdateContact = <
  TError = ErrorType<UpdateContact500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateContact>>,
    TError,
    { contactId: string; data: UpdateContactBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getUpdateContactMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * delete contact
 */
export const deleteContact = (
  contactId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<DeleteContact200>(
    { url: `/v1/contacts/${contactId}`, method: "delete" },
    options
  );
};

export const getDeleteContactMutationOptions = <
  TError = ErrorType<DeleteContact500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteContact>>,
    TError,
    { contactId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteContact>>,
  TError,
  { contactId: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteContact>>,
    { contactId: string }
  > = (props) => {
    const { contactId } = props ?? {};

    return deleteContact(contactId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteContactMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteContact>>
>;

export type DeleteContactMutationError = ErrorType<DeleteContact500>;

export const useDeleteContact = <
  TError = ErrorType<DeleteContact500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteContact>>,
    TError,
    { contactId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getDeleteContactMutationOptions(options);

  return useMutation(mutationOptions);
};
