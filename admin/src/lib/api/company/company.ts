/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * Flyer Openapi
 * Flyer Openapi version
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type {
  GetCompany200,
  GetCompany500,
  UpdateCompany201,
  UpdateCompany500,
  UpdateCompanyBody,
} from ".././interfaces";
import { customInstance } from "../../orvalInstance";
import type { ErrorType } from "../../orvalInstance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * get company
 */
export const getCompany = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<GetCompany200>(
    { url: `/v1/company`, method: "get", signal },
    options
  );
};

export const getGetCompanyQueryKey = () => [`/v1/company`] as const;

export const getGetCompanyQueryOptions = <
  TData = Awaited<ReturnType<typeof getCompany>>,
  TError = ErrorType<GetCompany500>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getCompany>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryOptions<Awaited<ReturnType<typeof getCompany>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCompanyQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompany>>> = ({
    signal,
  }) => getCompany(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetCompanyQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCompany>>
>;
export type GetCompanyQueryError = ErrorType<GetCompany500>;

export const useGetCompany = <
  TData = Awaited<ReturnType<typeof getCompany>>,
  TError = ErrorType<GetCompany500>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getCompany>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCompanyQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * update new company
 */
export const updateCompany = (
  updateCompanyBody: UpdateCompanyBody,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<UpdateCompany201>(
    {
      url: `/v1/company`,
      method: "put",
      headers: { "Content-Type": "application/json" },
      data: updateCompanyBody,
    },
    options
  );
};

export const getUpdateCompanyMutationOptions = <
  TError = ErrorType<UpdateCompany500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCompany>>,
    TError,
    { data: UpdateCompanyBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCompany>>,
  TError,
  { data: UpdateCompanyBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCompany>>,
    { data: UpdateCompanyBody }
  > = (props) => {
    const { data } = props ?? {};

    return updateCompany(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCompanyMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateCompany>>
>;
export type UpdateCompanyMutationBody = UpdateCompanyBody;
export type UpdateCompanyMutationError = ErrorType<UpdateCompany500>;

export const useUpdateCompany = <
  TError = ErrorType<UpdateCompany500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCompany>>,
    TError,
    { data: UpdateCompanyBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getUpdateCompanyMutationOptions(options);

  return useMutation(mutationOptions);
};
