/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * Flyer Openapi
 * Flyer Openapi version
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type {
  CreateExpense201,
  CreateExpense500,
  CreateExpenseBody,
  ListExpenses200,
  ListExpenses500,
  ListExpensesParams,
  GetExpense200,
  GetExpense500,
  UpdateExpense200,
  UpdateExpense500,
  UpdateExpenseBody,
  DeleteExpense200,
  DeleteExpense500,
} from ".././interfaces";
import { customInstance } from "../../orvalInstance";
import type { ErrorType } from "../../orvalInstance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * create new expense
 */
export const createExpense = (
  createExpenseBody: CreateExpenseBody,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<CreateExpense201>(
    {
      url: `/v1/expenses`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: createExpenseBody,
    },
    options
  );
};

export const getCreateExpenseMutationOptions = <
  TError = ErrorType<CreateExpense500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createExpense>>,
    TError,
    { data: CreateExpenseBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createExpense>>,
  TError,
  { data: CreateExpenseBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createExpense>>,
    { data: CreateExpenseBody }
  > = (props) => {
    const { data } = props ?? {};

    return createExpense(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateExpenseMutationResult = NonNullable<
  Awaited<ReturnType<typeof createExpense>>
>;
export type CreateExpenseMutationBody = CreateExpenseBody;
export type CreateExpenseMutationError = ErrorType<CreateExpense500>;

export const useCreateExpense = <
  TError = ErrorType<CreateExpense500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createExpense>>,
    TError,
    { data: CreateExpenseBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getCreateExpenseMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * list all expenses
 */
export const listExpenses = (
  params?: ListExpensesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<ListExpenses200>(
    { url: `/v1/expenses`, method: "get", params, signal },
    options
  );
};

export const getListExpensesQueryKey = (params?: ListExpensesParams) =>
  [`/v1/expenses`, ...(params ? [params] : [])] as const;

export const getListExpensesQueryOptions = <
  TData = Awaited<ReturnType<typeof listExpenses>>,
  TError = ErrorType<ListExpenses500>
>(
  params?: ListExpensesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listExpenses>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryOptions<Awaited<ReturnType<typeof listExpenses>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListExpensesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listExpenses>>> = ({
    signal,
  }) => listExpenses(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type ListExpensesQueryResult = NonNullable<
  Awaited<ReturnType<typeof listExpenses>>
>;
export type ListExpensesQueryError = ErrorType<ListExpenses500>;

export const useListExpenses = <
  TData = Awaited<ReturnType<typeof listExpenses>>,
  TError = ErrorType<ListExpenses500>
>(
  params?: ListExpensesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listExpenses>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getListExpensesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * get expense
 */
export const getExpense = (
  expenseId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<GetExpense200>(
    { url: `/v1/expenses/${expenseId}`, method: "get", signal },
    options
  );
};

export const getGetExpenseQueryKey = (expenseId: string) =>
  [`/v1/expenses/${expenseId}`] as const;

export const getGetExpenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getExpense>>,
  TError = ErrorType<GetExpense500>
>(
  expenseId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getExpense>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryOptions<Awaited<ReturnType<typeof getExpense>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetExpenseQueryKey(expenseId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getExpense>>> = ({
    signal,
  }) => getExpense(expenseId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!expenseId, ...queryOptions };
};

export type GetExpenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getExpense>>
>;
export type GetExpenseQueryError = ErrorType<GetExpense500>;

export const useGetExpense = <
  TData = Awaited<ReturnType<typeof getExpense>>,
  TError = ErrorType<GetExpense500>
>(
  expenseId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getExpense>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetExpenseQueryOptions(expenseId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * update expense
 */
export const updateExpense = (
  expenseId: string,
  updateExpenseBody: UpdateExpenseBody,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<UpdateExpense200>(
    {
      url: `/v1/expenses/${expenseId}`,
      method: "put",
      headers: { "Content-Type": "application/json" },
      data: updateExpenseBody,
    },
    options
  );
};

export const getUpdateExpenseMutationOptions = <
  TError = ErrorType<UpdateExpense500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateExpense>>,
    TError,
    { expenseId: string; data: UpdateExpenseBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateExpense>>,
  TError,
  { expenseId: string; data: UpdateExpenseBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateExpense>>,
    { expenseId: string; data: UpdateExpenseBody }
  > = (props) => {
    const { expenseId, data } = props ?? {};

    return updateExpense(expenseId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateExpenseMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateExpense>>
>;
export type UpdateExpenseMutationBody = UpdateExpenseBody;
export type UpdateExpenseMutationError = ErrorType<UpdateExpense500>;

export const useUpdateExpense = <
  TError = ErrorType<UpdateExpense500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateExpense>>,
    TError,
    { expenseId: string; data: UpdateExpenseBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getUpdateExpenseMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * delete expense
 */
export const deleteExpense = (
  expenseId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<DeleteExpense200>(
    { url: `/v1/expenses/${expenseId}`, method: "delete" },
    options
  );
};

export const getDeleteExpenseMutationOptions = <
  TError = ErrorType<DeleteExpense500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteExpense>>,
    TError,
    { expenseId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteExpense>>,
  TError,
  { expenseId: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteExpense>>,
    { expenseId: string }
  > = (props) => {
    const { expenseId } = props ?? {};

    return deleteExpense(expenseId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteExpenseMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteExpense>>
>;

export type DeleteExpenseMutationError = ErrorType<DeleteExpense500>;

export const useDeleteExpense = <
  TError = ErrorType<DeleteExpense500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteExpense>>,
    TError,
    { expenseId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getDeleteExpenseMutationOptions(options);

  return useMutation(mutationOptions);
};
