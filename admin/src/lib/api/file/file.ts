/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * Flyer Openapi
 * Flyer Openapi version
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type {
  PostV1Files200,
  PostV1Files413,
  PostV1Files500,
  DeleteFile200,
  DeleteFile500,
} from ".././interfaces";
import { customInstance } from "../../orvalInstance";
import type { ErrorType } from "../../orvalInstance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * Upload new file
 */
export const postV1Files = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<PostV1Files200>(
    { url: `/v1/files`, method: "post" },
    options
  );
};

export const getPostV1FilesMutationOptions = <
  TError = ErrorType<PostV1Files413 | PostV1Files500>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1Files>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1Files>>,
  TError,
  TVariables,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1Files>>,
    TVariables
  > = () => {
    return postV1Files(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1FilesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1Files>>
>;

export type PostV1FilesMutationError = ErrorType<
  PostV1Files413 | PostV1Files500
>;

export const usePostV1Files = <
  TError = ErrorType<PostV1Files413 | PostV1Files500>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1Files>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getPostV1FilesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete file content
 */
export const deleteFile = (
  fileId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<DeleteFile200>(
    { url: `/v1/files/${fileId}`, method: "delete" },
    options
  );
};

export const getDeleteFileMutationOptions = <
  TError = ErrorType<DeleteFile500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteFile>>,
    TError,
    { fileId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteFile>>,
  TError,
  { fileId: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteFile>>,
    { fileId: string }
  > = (props) => {
    const { fileId } = props ?? {};

    return deleteFile(fileId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteFileMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteFile>>
>;

export type DeleteFileMutationError = ErrorType<DeleteFile500>;

export const useDeleteFile = <
  TError = ErrorType<DeleteFile500>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteFile>>,
    TError,
    { fileId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getDeleteFileMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get file content
 */
export const getFile = (
  fileId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/v1/files/${fileId}/contents`, method: "get", signal },
    options
  );
};

export const getGetFileQueryKey = (fileId: string) =>
  [`/v1/files/${fileId}/contents`] as const;

export const getGetFileQueryOptions = <
  TData = Awaited<ReturnType<typeof getFile>>,
  TError = ErrorType<unknown>
>(
  fileId: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetFileQueryKey(fileId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFile>>> = ({
    signal,
  }) => getFile(fileId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!fileId, ...queryOptions };
};

export type GetFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFile>>
>;
export type GetFileQueryError = ErrorType<unknown>;

export const useGetFile = <
  TData = Awaited<ReturnType<typeof getFile>>,
  TError = ErrorType<unknown>
>(
  fileId: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetFileQueryOptions(fileId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
